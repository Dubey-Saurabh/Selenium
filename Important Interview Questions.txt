If not defined priority annotation in testng, in what order our test will run:
-If test priority is not defined explicitly while running multiple cases, TestNG assigns all cases with a Default test priority, i.e., zero (0)

How do you handle synchronization issues in selenium:
-In Selenium test automation, synchronization issues arise due to timing mismatches between test script execution and webpage loading.
  To handle this, use implicit and explicit waits to ensure elements are ready before interacting with them.

How to launch Safari browser via Selenium:
-No need to set property for Safari browser
  Add a WebDriver extension in safari browser first
  Need to Allow Remote Automation on iOS

How to handle frame is Selenium:
 -Frame consist of two important properties which is index and Name

 Absolute xpath:
 -Complete address of a locator from parent to child node.

 Difference between driver.get(url) and driver.navigate().to(url)
 -driver.navigate().to(url) is used when we want to redirect to some other external url from driver.get(url).

 NOTE: type='file' attribute should present for Attach/Upload/Browse file button only then .send method will work for upload this file.

Limitations of CSS Selectors in Selenium:
-It is very sensitive to HTML DOM structural changes
-CSS selectors are not as flexible as XPath in terms of traversing the DOM
-CSS selectors can be challenging to use with dynamic content, such as elements that change their IDs or classes
-Different browsers may interpret CSS selectors differently, leading to inconsistencies in test execution


Common Challenges in UI Automation and How to Address Them:

1. Handling Dynamic Content
Challenge: Elements with dynamic IDs or changing attributes can make it difficult to locate them reliably.
Solution: Employ robust locator strategies like XPath or CSS selectors that can adapt to changes. Consider using techniques like waiting for elements to appear or disappear, and using relative locators.
2. Frequent UI Changes
Challenge: Frequent UI changes can lead to test script failures and increased maintenance costs.
Solution: Use a modular approach to design test scripts, making them more resilient to UI changes. Employ page object models to encapsulate UI elements and interactions. Consider using tools like Selenium Grid to test across different browsers and devices.
3. Slow Test Execution
Challenge: Long test execution times can reduce efficiency and hinder the development process.
Solution: Optimize test scripts by minimizing page load times, reducing wait times, and parallelizing test execution. Consider using headless browsers for faster execution.
4. Flaky Tests
Challenge: Unstable tests can lead to false positives and hinder the reliability of test results.
Solution: Implement robust error handling mechanisms, use explicit waits, and carefully design test cases to minimize flakiness. Consider using a reliable test framework and test management tool.
5. Maintaining Test Suites
Challenge: As applications evolve, maintaining test suites can become time-consuming and error-prone.
Solution: Use a version control system to manage test scripts and track changes. Implement a regular test maintenance process to keep tests up-to-date. Consider using self-healing capabilities in your test framework.
6. Handling Asynchronous Operations
Challenge: Asynchronous operations can make it difficult to synchronize test steps with the application's behavior.
Solution: Use explicit waits and implicit waits to ensure that elements are loaded before interacting with them. Consider using browser-specific wait mechanisms like WebDriverWait.

Explain a scenario you have faced in your earlier project where you have caught the bug and you report it and fixed

A Real-World Bug: A Case Study
The Scenario:
I was working on a web application for a payment method.
One of the core functionalities was the checkout process, which involved adding items to the cart, applying coupons, and proceeding to payment.
During automated testing, I encountered a peculiar issue where the coupon code discount wasn't being applied correctly in certain scenarios.

Identifying the Bug:
Test Case Failure: My automated test cases consistently failed at the checkout stage, specifically when applying a specific coupon code.
Manual Verification: I manually tested the same scenario and confirmed the issue. The discount was not being applied as expected.
Debugging: I used browser developer tools like Splunk to inspect the network requests and responses.
I noticed that the API call to apply the coupon was returning an error in certain cases, leading to incorrect calculations.

Reporting the Bug:
I logged a detailed bug report in our bug tracking system, including:
Clear and concise bug title: "Coupon Discount Not Applied Correctly in Specific Scenarios"
Step-by-step reproduction steps: A clear guide on how to replicate the issue.
Expected and actual behavior: A description of what the system should do versus what it actually does.
Screenshots or logs: Visual evidence to support the issue.
Severity and priority: A rating of the bug's impact on the application.

Fixing the Bug:
The development team investigated the issue and identified the root cause: a bug in the backend API responsible for processing coupon codes.
They fixed the bug by correcting the logic in the API.

Retesting and Verification:
Once the fix was deployed, I retested the affected scenarios to ensure the issue was resolved.
The automated test cases were also updated to reflect the changes in the application behavior.

Key Takeaways:
Thorough Testing: A combination of manual and automated testing is crucial to identify and resolve issues effectively.
Effective Bug Reporting: Clear and concise bug reports help developers understand the issue and fix it promptly.
Collaboration with the Development Team: Open communication and collaboration between testers and developers are essential for efficient bug resolution.
Continuous Testing: Regular testing and monitoring are necessary to prevent regressions and ensure the quality of the application.
By following these steps, I was able to successfully identify, report, and fix the bug, contributing to the overall quality of the e-commerce platform.


Hi, my name is Saurabh Dubey, I have been working as an automation testing professional for Epam systems for more than 3 years now. Total i do have around 5 plus years of experience in testing only.
As an agile member, my job is to take care of all testing activities starting from the Feature backlog till the delivery of the features.
When comes to technologies I speacialize in using Selenium Webdriver for Web UI automation testing, RestAPI, Postman and Jersey client libraries for backend testing.
Jenkins as a CI/CD tools , Version controlling tools like GIT/ Bitbucket.
Page object model, Cucumber BDD, TestNG framework etc.
Maven as a build automation tool, Rally as a track management tool.
And I'm pretty much comfortable with Manual testing tasks also like all the kinds of black box testing.